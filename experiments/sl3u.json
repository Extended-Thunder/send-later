[
  {
    "namespace": "SL3U",
    "functions": [
      {
        "name": "SendMessageWithCheck",
        "type": "function",
        "async": true,
        "parameters": [
          {
            "name": "tabId",
            "type": "integer"
          }
        ]
      },
      {
        "name": "queueSendUnsentMessages",
        "type": "function",
        "async": true,
        "parameters": []
      },
      {
        "name": "setLogConsoleLevel",
        "type": "function",
        "async": true,
        "parameters": [
          {
            "name": "level",
            "type": "string",
            "description": "Logging level"
          }
        ]
      },
      {
        "name": "expandRecipients",
        "type": "function",
        "async": true,
        "description": "Expand mailing lists into individual recipients.",
        "parameters": [
          {
            "name": "tabId",
            "type": "integer"
          },
          {
            "name": "field",
            "type": "string"
          }
        ]
      },
      {
        "name": "signingOrEncryptingMessage",
        "type": "function",
        "async": true,
        "description": "Indicates whether the draft in the specified tab has signing or encryption enabled",
        "parameters": [
          {
            "name": "tabId",
            "type": "integer"
          }
        ]
      },
      {
        "name": "GenericPreSendCheck",
        "type": "function",
        "async": true,
        "description": "Check if message is ready to be sent, and alert other extensions.",
        "parameters": []
      },
      {
        "name": "isDraftsFolder",
        "type": "function",
        "async": true,
        "description": "Check whether folder is a Drafts folder",
        "parameters": [
          {
            "name": "accountId",
            "type": "string",
            "description": "Account ID"
          },
          {
            "name": "path",
            "type": "string",
            "description": "Folder path"
          }
        ]
      },
      {
        "name": "setDispositionState",
        "type": "function",
        "async": true,
        "description": "Set message disposition",
        "parameters": [
          {
            "name": "messageId",
            "type": "integer",
            "description": "ID of message to modify."
          },
          {
            "name": "disposition",
            "type": "string",
            "description": "Disposition to set ('replied' or 'forwarded')"
          }
        ]
      },
      {
        "name": "updateFolder",
        "type": "function",
        "async": true,
        "description": "Force TB to look for new messages in folder",
        "parameters": [
          {
            "name": "folder",
            "$ref": "folders.MailFolder"
          }
        ]
      },
      {
        "name": "waitUntilIdle",
        "type": "function",
        "async": true,
        "description": "Wait until folders aren't being modified",
        "parameters": [
          {
            "name": "folders",
            "type": "array",
            "items": {
              "$ref": "folders.MailFolder"
            }
          }
        ]
      },
      {
        "name": "expungeOrCompactFolder",
        "type": "function",
        "async": true,
        "description": "Expunge (IMAP) or compact a folder",
        "parameters": [
          {
            "name": "folder",
            "$ref": "folders.MailFolder"
          }
        ]
      },
      {
        "name": "saveMessage",
        "type": "function",
        "async": true,
        "description": "Save a message into a folder",
        "parameters": [
          {
            "name": "content",
            "type": "string"
          },
          {
            "name": "folder",
            "$ref": "folders.MailFolder"
          },
          {
            "name": "markRead",
            "type": "boolean"
          }
        ]
      },
      {
        "name": "getLegacyPref",
        "type": "function",
        "description": "Gets a preference.",
        "async": true,
        "parameters": [
          {
            "name": "name",
            "type": "string",
            "description": "The preference name"
          },
          {
            "name": "dtype",
            "type": "string",
            "description": "Data type of the preference"
          },
          {
            "name": "defVal",
            "type": "string",
            "description": "Fallback value if nothing is returned."
          },
          {
            "name": "isFull",
            "type": "boolean",
            "optional": true,
            "description": "True if it's a full Thunderbird preference key, not a Send Later preference."
          }
        ]
      },
      {
        "name": "setLegacyPref",
        "type": "function",
        "description": "Sets a preference.",
        "async": true,
        "parameters": [
          {
            "name": "name",
            "type": "string",
            "description": "The preference name."
          },
          {
            "name": "dtype",
            "type": "string",
            "description": "Data type of the preference."
          },
          {
            "name": "value",
            "type": "string",
            "description": "Preference value as a string."
          }
        ]
      },
      {
        "name": "setHeader",
        "type": "function",
        "async": true,
        "description": "Add a custom header to a compose message",
        "parameters": [
          {
            "name": "tabId",
            "type": "integer",
            "description": "Compose window to modify"
          },
          {
            "name": "name",
            "type": "string",
            "description": "Name of the header to set"
          },
          {
            "name": "value",
            "type": "string",
            "description": "Value of custom header"
          }
        ]
      },
      {
        "name": "setCustomDBHeaders",
        "type": "function",
        "async": true,
        "description": "",
        "parameters": [
          {
            "name": "requestedHdrs",
            "type": "any"
          }
        ]
      },
      {
        "name": "findAssociatedDraft",
        "type": "function",
        "async": true,
        "description": "Find whether a composition window is editing an existing draft.",
        "parameters": [
          {
            "name": "windowId",
            "type": "integer",
            "optional": true,
            "description": ""
          }
        ]
      },
      {
        "name": "forceToolbarVisible",
        "type": "function",
        "async": true,
        "description": "Handle  when a new compose window is opened.",
        "parameters": [
          {
            "name": "windowId",
            "type": "integer",
            "optional": true,
            "description": "If unset, the function will run on all available windows. Otherwise just the most recent msgcompose window."
          }
        ]
      },
      {
        "name": "hijackComposeWindowKeyBindings",
        "type": "function",
        "async": true,
        "description": "Attach key bindings to compose windows.",
        "parameters": [
          {
            "name": "windowId",
            "type": "integer",
            "optional": true,
            "description": "If unset, the function will run on all available windows. Otherwise just the most recent msgcompose window."
          }
        ]
      }
    ],
    "events": [
      {
        "name": "onKeyCode",
        "type": "function",
        "description": "Fires from message compose windows on Alt+Shift+Enter",
        "parameters": []
      }
    ]
  }
]
