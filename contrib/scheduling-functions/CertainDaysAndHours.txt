Function name: CertainDaysAndHours

Author: Jonathan Kamens <jik@kamens.us>

Help text
---------

This function is similar to the BusinessHours function that comes predefined in
Send Later, but rather than just having one start time and end time per day, it
allows multiple time ranges per day and ensures that messages are sent within
one of those ranges. The default code below defines the work days as Monday
through Friday and the time ranges as 8:30 AM to 12:00 PM and 1:00 PM to 5:30
PM, but you can easily adjust these either by modifying the code or configuring
Send Later to pass in arguments that specify different work days and work
periods. See the comment in the code for the format of each.

Code
----

// Sun == 0, Sat == 6
var workDays = [1, 2, 3, 4, 5];

// Each item in this array is another array with two items each of which is
// itself an array of two numbers. Each item represents a range of work hours
// during the day. The default example here says that it's OK to send emails
// between 8:30 AM and 12:00 PM, and again from 1:00 PM to 5:30 PM. In other
// words, no emails before 8:30 AM, or between 12:00PM and 1:00 PM, or after
// 5:30 PM.
// *** THESE MUST BE IN ORDER from earliest to latest and non-overlapping. ***
var workPeriods = [
  [[8, 30], [12, 0]],
  [[13, 00], [17, 30]],
];

if (args && args[0])
  workDays = args[0];
if (args && args[1])
  workPeriods = args[1];

try {
  if (!workDays || (workDays.length) == 0 ||
      !workDays.every(d => (d >= 0) && (d <= 6))) {
    console.log("workDays is bad");
    return undefined;
  }

  if (!workPeriods || (workPeriods.length == 0) ||
      !workPeriods.every(([s, e]) => {
        return s.length == 2 &&
          e.length == 2 &&
          Number(s[0]) >= 0 &&
          Number(s[0]) <= 23 &&
          Number(s[1]) >= 0 &&
          Number(s[1]) <= 59 &&
          Number(e[0]) >= 0 &&
          Number(e[0]) <= 23 &&
          Number(e[1]) >= 0 &&
          Number(e[1]) <= 59
      })) {
    console.log("workPeriods is bad");
    return undefined;
  }
} catch (ex) {
  console.log("exception validating workPeriods, it's probably bad");
  return undefined;
}

function tCompare(t1, t2) {
  if (t1[0] < t2[0])
    return -1;
  else if (t1[0] == t2[0] && t1[1] < t2[1])
    return -1;
  else if (t1[0] == t2[0] && t1[1] == t2[1])
    return 0;
  else
    return 1;
}

function alignToWorkPeriods(d) {
  // If the specified timestamp is within one of the work periods for the
  // day, it is returned unmodified. If it's not but there is a later work
  // period for the day, the start of the next work period is returned.
  // Otherwise, undefined is returned.
  let hours = d.getHours();
  let minutes = d.getMinutes();
  let dt = [hours, minutes];
  for (let p of workPeriods) {
    if (tCompare(dt, p[0]) >= 0 && tCompare(dt, p[1]) <= 0)
      return d;
    if (tCompare(dt, p[0]) < 0) {
      d = new Date(d);
      d.setHours(p[0][0]);
      d.setMinutes(p[0][1]);
      return d;
    }
  }
  return undefined;
}

if (prev)
  // Not expected in normal usage, but used as the current time for testing.
  next = new Date(prev);
else
  next = new Date();

while (true) {
  let aligned = alignToWorkPeriods(next);
  if (aligned && workDays.includes(next.getDay())) {
    next = aligned;
    break;
  }
  next.setDate(next.getDate() + 1);
  next.setHours(0);
  next.setMinutes(0);
}
